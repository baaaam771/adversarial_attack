{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"toc_visible":true,"authorship_tag":"ABX9TyOwgsNeyNRZaUzmOAhuedGq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import gzip\n","import urllib.request\n","import natsort\n","import matplotlib.pyplot as plt\n","import cv2\n","import random\n","\n","\n","from PIL import Image\n","from keras.models import load_model\n","\n","import tensorflow as tf\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.optimizers import RMSprop\n","from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\n","from tensorflow.keras.optimizers import SGD\n","from keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\n","\n","\n","from sklearn.model_selection import train_test_split\n","\n","\n","################\n","from functions import *\n","loss_object = tf.keras.losses.CategoricalCrossentropy()\n","\n","\n","## 기본 설정 #####################################################################\n","signnum = 4 # 인식할 표지판 수 (바퀴 당 2번)\n","present_attack = False # 정상 -> 공격 -> 정상 ... ~ 으로 진행\n","eps = 0.1\n","\n","model = load_model('./parameters/cnn_train_model.h5') # CNN classifier\n","detector = load_model('./parameters/Detector_param.h5') # Fourier Detector\n","\n","\n","for nth in range(signnum):\n","\n","  input_img = np.array(\"// 표지판 이미지 여기에 넣어줘야 함: 근데 이미지 매번 촬영하는거니까 변수로 해서서 로딩하는는 방식이이 될될 것것 같음 //\")\n","\n","  # CNN 모델 및 분류\n","  class_prediction_onehot = model.predict(input_img.reshape(1,32,32,3)/255) # one-hot\n","  class_prediction = [int(np.argmax(class_prediction_onehot))] # label 형태 (근데 리스트 안에 있음)\n","\n","  # 공격 이미지 생성 (FGSM, eps=0.10) (정상 -> 공격 -> 정상 ... 반복)\n","  if present_attack == False:\n","    attack = True # 다음 번은 공격 하도록\n","  elif present_attack == True:\n","    trash1, trash2, ad_examples, trash3 = fgsm_attack(model, input_img, class_prediction, eps) #x 공격데이터 : 0~1 정규화 완료, y 데이터 : 12개 라벨\n","    input_img = ad_examples # 공격 이미지로 덮어씌우기  \n","    attack = False # 다음 번은 공격 안 하도록\n","  \n","  # Fourier Detector\n","  fourier_img = Fourier_transform(input_img)\n","  detector_prediction = detector.predict(fourier_img)\n","  if detector_prediction == 1: # 공격 아님\n","    return input_img, class_prediction, fourier_img\n","  elif detector_prediction == 0: # 공격\n","    print(\"공격 이미지\")\n","    return input_img, class_prediction, fourier_img\n","    # 운전자자 확인인 및및 방어모델델 구현해야함"],"metadata":{"id":"g4-fKphLjvD9"},"execution_count":null,"outputs":[]}]}