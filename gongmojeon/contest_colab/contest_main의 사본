{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyOBRYqPdH3ybjUwRD8EcZqi"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["모든 데이터 기본\n","* x\n","  * (데이터 수, 32, 32, 3)\n","  * 정규화 [0~1]\n","* y \n","  * (데이터 수, 12) [원핫인코딩]"],"metadata":{"id":"QV2fWmPyeK2n"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K2Ed33AM7u2A","executionInfo":{"status":"ok","timestamp":1664699728678,"user_tz":-540,"elapsed":18697,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"e6aad7ad-8216-4270-dadc-635796c1092f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["cd drive/MyDrive/[한이음] 적대적 AI 공격에 대한 인공지능 보안기술 연구/3. 소스코드/GTSRB"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aeG9OWWW73zV","executionInfo":{"status":"ok","timestamp":1664699729517,"user_tz":-540,"elapsed":843,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"c038915c-f39d-4802-9d9b-c4d151b61a91"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/[한이음] 적대적 AI 공격에 대한 인공지능 보안기술 연구/3. 소스코드/GTSRB\n"]}]},{"cell_type":"markdown","source":["# 1. 준비"],"metadata":{"id":"joI3XTV8BPyi"}},{"cell_type":"markdown","source":["## 1.1. import"],"metadata":{"id":"QJSgoG8lDqnx"}},{"cell_type":"code","source":["import numpy as np\n","import pandas as pd\n","import os\n","import gzip\n","import urllib.request\n","import natsort\n","import matplotlib.pyplot as plt\n","import cv2\n","import random\n","\n","\n","from PIL import Image\n","from keras.models import load_model\n","\n","import tensorflow as tf\n","from tensorflow.keras.utils import to_categorical\n","from tensorflow.keras.optimizers import RMSprop\n","from tensorflow.keras.preprocessing import image\n","from tensorflow.keras.preprocessing.image import ImageDataGenerator\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout, Activation, Flatten\n","from keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D\n","from tensorflow.keras.optimizers import SGD\n","from keras.preprocessing.image import ImageDataGenerator\n","from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout\n","\n","\n","from sklearn.model_selection import train_test_split"],"metadata":{"id":"wB_6ZwEo_iYe"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 1.2. Train & Test 데이터 로드"],"metadata":{"id":"7STzEKD2BOYM"}},{"cell_type":"code","source":["metainfo = pd.read_csv(\"Meta.csv\")\n","traininfo = pd.read_csv(\"Train.csv\")\n","testinfo = pd.read_csv(\"Test.csv\")"],"metadata":{"id":"xqMZNxAwghTY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def matching_labels(unmatched_labels):\n","    \"\"\"\n","    3~38 라벨들이 담긴 리스트 -> 0~11 라벨들이 담긴 nparray\n","    \"\"\"\n","    real_classes = [3,7,9,10,11,12,13,17,18,25,35,38]\n","    matching_real_classes = [[np.where(np.array(unmatched_labels) == real_class)[0]] for real_class in real_classes]\n","  \n","    matched_labels = -np.ones(len(unmatched_labels))\n","    real_class = 0\n","    for matching_real_class in matching_real_classes:\n","        for idx in matching_real_class:\n","            matched_labels[idx] = real_class\n","        real_class += 1\n","    if -1 in matched_labels:\n","        print(\"3~38 -> 0~11 라벨 매칭 잘못 되었음\") # 여기는 프린트 되면 안 되는 부분 (확인용)\n","    return np.array(matched_labels)\n","\n","class GTSRB_train:\n","    def __init__(self):\n","        real_classes = [3,7,9,10,11,12,13,17,18,25,35,38]\n","        datas = [] # 이미지 담을 리스트\n","        labels = [] # 라벨 담을 리스트\n","        for real_class in real_classes:\n","            imgs_path = \"Train/\" + str(real_class)\n","            num = 0\n","            for img in os.listdir(imgs_path):\n","                im = Image.open(imgs_path +'/'+ img)\n","                im = np.array(im.resize((32,32)))\n","                datas.append(im)\n","                labels.append(real_class)\n","                num += 1\n","                if num == 1000:\n","                    print(f'Train : real_class 중 [{real_class}] 완료')\n","                    break;\n","\n","        labels = to_categorical(matching_labels(labels))\n","        self.x_train, self.x_val, self.y_train, self.y_val = train_test_split(np.array(datas), labels, test_size=0.1)\n","        self.x_train, self.x_val = self.x_train/255, self.x_val/255 # 정규화\n","\n","class GTSRB_test:\n","    def __init__(self):\n","        real_classes = [3,7,9,10,11,12,13,17,18,25,35,38]\n","        datas = []\n","        labels = np.array([testinfo.ClassId[i] for i in range(len(testinfo.ClassId))])\n","        for img in natsort.natsorted(os.listdir(\"Test\")):\n","            im = Image.open(\"Test/\"+ img)\n","            im = np.array(im.resize((32,32)))\n","            datas.append(im)\n","\n","        labels_test_idx = []\n","        for i in range(len(labels)):\n","            if labels[i] in real_classes:\n","                labels_test_idx.append(i)\n","            if len(labels_test_idx)%1000 == 0:\n","                print(f\"Test :{len(labels_test_idx)}\")\n","\n","        test_data = []\n","        test_label = []\n","        for idx in labels_test_idx:\n","            test_data.append(datas[idx])\n","            test_label.append(labels[idx])\n","        self.x_test = np.array(test_data)/255\n","        self.y_test = to_categorical(matching_labels(test_label))   "],"metadata":{"id":"nFGC2qvHEe4G"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_train = GTSRB_train()\n","data_test = GTSRB_test()\n","# train & test 총 약 11분\n","\n","print(\"===== TRAIN =====\")\n","# x_train : (10800, 32, 32, 3), 정규화 완료 (0~1)\n","print(data_train.x_train.shape)\n","print(np.min(data_train.x_train), np.max(data_train.x_train))\n","# x_val : (1200, 32, 32, 3), 정규화 완료 (0~1)\n","print(data_train.x_val.shape)\n","print(np.min(data_train.x_val), np.max(data_train.x_val))\n","# y_train : (10800, 12) : 0~11 원핫인코딩\n","print(data_train.y_train.shape)\n","# y_val : (1200, 12) : 0~11 원핫인코딩\n","print(data_train.y_val.shape)\n","\n","print(\"===== TEST =====\")\n","# x_train : (10800, 32, 32, 3), 정규화 완료 (0~1)\n","print(data_test.x_test.shape)\n","print(np.min(data_test.x_test), np.max(data_test.x_test))\n","# y_train : (10800, 12) : 0~11 원핫인코딩\n","print(data_test.y_test.shape)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AHktMfpJC8BY","executionInfo":{"status":"ok","timestamp":1664700305754,"user_tz":-540,"elapsed":570723,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"c4444842-be92-4885-a7bc-0b4f48ed6ba9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Train : real_class 중 [3] 완료\n","Train : real_class 중 [7] 완료\n","Train : real_class 중 [9] 완료\n","Train : real_class 중 [10] 완료\n","Train : real_class 중 [11] 완료\n","Train : real_class 중 [12] 완료\n","Train : real_class 중 [13] 완료\n","Train : real_class 중 [17] 완료\n","Train : real_class 중 [18] 완료\n","Train : real_class 중 [25] 완료\n","Train : real_class 중 [35] 완료\n","Train : real_class 중 [38] 완료\n","Test :0\n","Test :0\n","Test :1000\n","Test :2000\n","Test :3000\n","Test :3000\n","Test :3000\n","Test :3000\n","Test :4000\n","Test :5000\n","Test :6000\n","===== TRAIN =====\n","(10800, 32, 32, 3)\n","0.0 1.0\n","(1200, 32, 32, 3)\n","0.0 1.0\n","(10800, 12)\n","(1200, 12)\n","===== TEST =====\n","(6180, 32, 32, 3)\n","0.0 1.0\n","(6180, 12)\n"]}]},{"cell_type":"markdown","source":["## 1.3. CNN"],"metadata":{"id":"yL0pR9gPDL5_"}},{"cell_type":"code","source":["cd ../contest"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XZ779DYKPn0J","executionInfo":{"status":"ok","timestamp":1664700306290,"user_tz":-540,"elapsed":564,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"27cbae0b-3c57-4ae5-fd75-bf352019ed01"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["/content/drive/MyDrive/[한이음] 적대적 AI 공격에 대한 인공지능 보안기술 연구/3. 소스코드/공모전용\n"]}]},{"cell_type":"code","source":["def train(data, file_name, num_epochs=50, batch_size=128):\n","    \"\"\"\n","    Standard neural network training procedure.\n","    \"\"\"\n","    model = Sequential()\n","\n","    IMG_HEIGHT = 32\n","    IMG_WIDTH = 32\n","\n","    # 첫번째 Convolutional Layer : 입력 데이터로부터 특징을 추출\n","    model.add(Conv2D(filters=96, kernel_size=3, activation='relu', input_shape=data.x_train.shape[1:]))\n","    model.add(MaxPool2D(pool_size=(2, 2)))\n","    model.add(Dropout(rate=0.25))\n","\n","    # 두번째 Convolutional Layer\n","    model.add(Conv2D(filters=192, kernel_size=3, activation='relu'))\n","    model.add(MaxPool2D(pool_size=(2, 2)))\n","    model.add(Dropout(rate=0.25)) # 인풋데이터의 25%를 무작위로 0으로 만듦\n","\n","    # 세번째 Convolutional Layer\n","    model.add(Conv2D(filters=192, kernel_size=3, activation='relu')) # 특징을 추출하는 기능을 하는 필터, 비선형 값으로 바꿔주는 activation 함수->relu\n","    # model.add(GlobalAveragePooling2D())\n","    model.add(Flatten())\n","\n","    model.add(Dense(units=64, activation='relu'))\n","    model.add(Dense(12, activation='softmax'))\n","\n","    # 모델 컴파일 하기\n","    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n","    model.summary()\n","\n","    # 모델 핏하기\n","    EPOCHS = num_epochs\n","    model.fit(data.x_train, data.y_train,\n","              validation_data = (data.x_val, data.y_val), \n","              epochs=EPOCHS, steps_per_epoch=60\n","              )\n","\n","    if file_name != None:\n","        model.save(file_name)\n","\n","    return model"],"metadata":{"id":"Yx7esifUDPzu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title CNN parameter load option\n","load_param = True #@param {type:\"boolean\"}\n","save_new_file = False #@param {type:\"boolean\"}\n","\n","if load_param == False:\n","  if save_new_file == True:\n","    fname = \"cnn_train_model.h5\"\n","  elif save_new_file == False:\n","    fname = None\n","  model = train(data_train, fname, num_epochs=30)\n","elif load_param == True:\n","  model = load_model('cnn_train_model.h5')"],"metadata":{"id":"gAYWJhVXPRHL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss, accuracy = model.evaluate(data_train.x_train, data_train.y_train)\n","print('train set accuracy: ', accuracy * 100) # train 성능\n","\n","loss, accuracy = model.evaluate(data_train.x_val, data_train.y_val)\n","print('valid set accuracy: ', accuracy * 100) # val 성능\n","\n","loss, accuracy = model.evaluate(data_test.x_test, data_test.y_test)\n","print('test set accuracy with nomalization: ', accuracy * 100) # test 성능"],"metadata":{"id":"Gvg84DX8DRzR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1664700335872,"user_tz":-540,"elapsed":28618,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"7788d497-be5a-4446-ba6a-cae2e63de4ef"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["338/338 [==============================] - 17s 49ms/step - loss: 5.8101e-04 - accuracy: 0.9999\n","train set accuracy:  99.99074339866638\n","38/38 [==============================] - 2s 48ms/step - loss: 5.8993e-04 - accuracy: 1.0000\n","valid set accuracy:  100.0\n","194/194 [==============================] - 10s 49ms/step - loss: 0.0304 - accuracy: 0.9636\n","test set accuracy with nomalization:  96.35922312736511\n"]}]},{"cell_type":"markdown","source":["# 2. Generate Adversarial examples : FGSM & PGD"],"metadata":{"id":"gDxm_eHiDUi8"}},{"cell_type":"markdown","source":["## 2.1. processing"],"metadata":{"id":"dQc_tZakvQJb"}},{"cell_type":"code","source":["def tf_preprocess(image):\n","  image = tf.cast(image, tf.float32)\n","  image = tf.image.resize(image, (32, 32))\n","  image = image[None, ...]\n","  return image\n","\n","# 확률 벡터에서 레이블을 추출해주는 헬퍼 메서드\n","def get_tf_label(labels):\n","    label = tf.cast(labels, tf.int32)\n","    label = tf.reshape(label,[1,12])\n","    return label\n","\n","loss_object = tf.keras.losses.CategoricalCrossentropy()\n","\n","def create_adversarial_pattern(input_image, input_label):\n","  with tf.GradientTape() as tape:\n","    tape.watch(input_image)\n","    input_img = tf.reshape(input_image,[1,32,32,3])\n","    prediction = model(input_img)\n","    loss = loss_object(input_label, prediction)\n","\n","  # 입력 이미지에 대한 손실 함수의 기울기를 구합니다.\n","  gradient = tape.gradient(loss, input_image)\n","  # 왜곡을 생성하기 위해 그래디언트의 부호를 구합니다.\n","  signed_grad = tf.sign(gradient)\n","  return signed_grad"],"metadata":{"id":"iUBBHr9IDY_b"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 2.2. FGSM"],"metadata":{"id":"DDR64m-TvSd3"}},{"cell_type":"code","source":["def fgsm_attack(model,test_x,test_y,eps):\n","    \n","    prog = 0 # 진행상황 확인용 변수\n","\n","    correct = 0\n","    adv_examples = []\n","    save_adv_examples = [] # 공격받은 이미지들이 저장될 리스트\n","    save_original_output = [] # 공격받은 이미지들의 정답 라벨 값이 저장될 리스트\n","    \n","    for i in range(len(test_x)):\n","        # 1장의 이미지와 그 label\n","        data = test_x[i]\n","        target_onehot = test_y[i] # one-hot 형태\n","        target_label = int(np.argmax(target_onehot)) # label 형태\n","\n","        # model이 정상 데이터를 분류한 결과 (각각 one-hot 형태, int label 형태)\n","        result_onehot = model.predict(data.reshape(1,32,32,3)) # one-hot 형태\n","        result_label = int(np.argmax(result_onehot))\n","\n","        # 모델이 정상 데이터인데도 잘못 분류했다면 사용하지 않는다 (아래 코드 실행하지 않고 다음 이미지로 넘어감)\n","        if target_label != result_label:\n","            continue\n","\n","        # 이미지 전처리\n","        img =  tf_preprocess(data) # 텐서플로 전처리\n","        label = get_tf_label(target_onehot) # 확률벡터에서 레이블 추출\n","        \n","        # FGSM 공격 수행\n","        perturbations = create_adversarial_pattern(img, label)\n","        adv_x = img + eps * perturbations\n","        adv_x = tf.clip_by_value(adv_x, 0, 1) # 공격받은 이미지\n","\n","        # 공격 이미지를 분류기에 넣은 결과; 잘못 분류되어야 할 것 \n","        atkresult_onehot = model.predict(adv_x) # one-hot 형태\n","        atkresult_label = int(np.argmax(atkresult_onehot)) # label 형태\n","\n","        # 만약 공격 받아도 제대로 분류된다면 correct로 count\n","        if atkresult_label == target_label:\n","            correct += 1\n","        \n","        # 공격 적용된 이미지, 그 공격 받은 이미지의 원래 정답 label을 각각 리스트에 저장합니다\n","        save_adv_examples.append(tf.reshape(adv_x,[32,32,3]))\n","        save_original_output.append(target_label)\n","\n","        prog += 1\n","\n","        if prog%500 == 0:\n","          print(\"prog :\", prog)\n","\n","    # 해당 엡실론에서의 최종 정확도를 계산합니다\n","    final_acc = correct/float(len(test_x))\n","    print(\"Epsilon: {}\\tTest Accuracy = {} / {} = {}\".format(eps, correct, len(test_x), final_acc))\n","\n","    # 정확도와 적대적 예제를 리턴합니다\n","    return final_acc, adv_examples, save_adv_examples, save_original_output"],"metadata":{"id":"HmsFDe59Dd8j"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 2.3. PGD"],"metadata":{"id":"sv50UYb3vVsK"}},{"cell_type":"code","source":["def pgd_attack(model,test_x,test_y,eps,step_size=2,num_steps=7): \n","    \"\"\"\n","    FGSM 코드와 차이점\n","    - step_size, num_steps 파라미터 추가됨\n","    - unifrom distribution 코드 추가\n","    - FGSM 공격 수행 -> PGD 공격 수행\n","    ** 모든 return 형식은 동일함\n","    \n","    default 값\n","    - step_size = 2 (alpha 값)\n","    - num_steps = 7 (iterations 값)\n","\n","    \"\"\"\n","\n","    prog = 0 # 진행상황 확인용 변수\n","\n","    correct = 0\n","    adv_examples = []\n","    save_adv_examples = [] # 공격받은 이미지들이 저장될 리스트\n","    save_original_output = [] # 공격받은 이미지들의 정답 라벨 값이 저장될 리스트\n","    \n","    for i in range(len(test_x)):\n","        # 1장의 이미지와 그 label\n","        data = test_x[i]\n","        target_onehot = test_y[i] # one-hot 형태\n","        target_label = int(np.argmax(target_onehot)) # label 형태\n","\n","        # model이 정상 데이터를 분류한 결과 (각각 one-hot 형태, int label 형태)\n","        result_onehot = model.predict(data.reshape(1,32,32,3)) # one-hot 형태\n","        result_label = int(np.argmax(result_onehot))\n","\n","        # 모델이 정상 데이터인데도 잘못 분류했다면 사용하지 않는다 (아래 코드 실행하지 않고 다음 이미지로 넘어감)\n","        if target_label != result_label:\n","            continue\n","\n","        # PGD uniform distribution 코드\n","        data = data + np.random.uniform(-eps,eps,data.shape)\n","        data = np.clip(data,0,255)\n","\n","        # 이미지 전처리\n","        img =  tf_preprocess(data) # 텐서플로 전처리 -> 0~1사이로 정규화 함.\n","        label = get_tf_label(target_onehot) # 확률벡터에서 레이블 추출\n","        \n","        # PGD 공격 수행\n","        adv_x = img # 공격받은 이미지 (for문으로 업데이트)\n","        for num_step in range(num_steps):\n","          perturbations = create_adversarial_pattern(adv_x,label) # signed_grad를 리턴한 값\n","          adv_x += step_size * perturbations\n","          adv_x = tf.clip_by_value(adv_x,img-eps,img+eps)\n","          adv_x = tf.clip_by_value(adv_x,0,1)\n","\n","        # 공격 이미지를 분류기에 넣은 결과; 잘못 분류되어야 할 것 \n","        atkresult_onehot = model.predict(adv_x) # one-hot 형태\n","        atkresult_label = int(np.argmax(atkresult_onehot)) # label 형태\n","\n","        # 만약 공격 받아도 제대로 분류된다면 correct로 count\n","        if atkresult_label == target_label:\n","            correct += 1\n","        \n","        # 공격 적용된 이미지, 그 공격 받은 이미지의 원래 정답 label을 각각 리스트에 저장합니다\n","        save_adv_examples.append(tf.reshape(adv_x,[32,32,3]))\n","        save_original_output.append(target_label) #공격 받은 이미지에 원래 타겟 값을 저장합니다 ! \n","\n","        prog += 1\n","\n","        if prog%500 == 0:\n","          print(\"prog :\", prog)\n","\n","    # 해당 엡실론에서의 최종 정확도를 계산합니다\n","    final_acc = correct/float(len(test_x))\n","    print(\"Epsilon: {}\\tTest Accuracy = {} / {} = {}\".format(eps, correct, len(test_x), final_acc))\n","\n","    # 정확도와 적대적 예제를 리턴합니다\n","    return final_acc, adv_examples, save_adv_examples, save_original_output"],"metadata":{"id":"R7KxcS7SDflQ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## 2.4. Adversarial Examples Generation"],"metadata":{"id":"KnUsBLlPvcIc"}},{"cell_type":"code","source":["#@title Adversarial Example option : 공격 데이터 설정\n","\n","attack_type = 'FGSM' #@param [\"FGSM\", \"PGD\"]\n","eps = 0.1 #@param [0.02, 0.03, 0.04, 0.05, 0.08, 0.10] {type:\"raw\"}"],"metadata":{"id":"zE9OFtX_t7Hw"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if attack_type == \"FGSM\":\n","  train_acc, train_ex, train_ad_examples, train_orig_labels = fgsm_attack(model, data_train.x_train, data_train.y_train, eps) #x 공격데이터 : 0~1 정규화 완료, y 데이터 : 12개 라벨\n","  valid_acc, valid_ex, val_ad_examples, val_orig_labels = fgsm_attack(model, data_train.x_val, data_train.y_val, eps)\n","  test_acc, test_ex, test_ad_examples, test_orig_labels = fgsm_attack(model, data_test.x_test, data_test.y_test, eps)\n","\n","elif attack_type == \"PGD\":\n","  train_acc, train_ex, train_ad_examples, train_orig_labels = pgd_attack(model, data_train.x_train, data_train.y_train, eps) #x 공격데이터 : 0~1 정규화 완료, y 데이터 : 12개 라벨\n","  valid_acc, valid_ex, val_ad_examples, val_orig_labels = pgd_attack(model, data_train.x_val, data_train.y_val, eps)\n","  test_acc, test_ex, test_ad_examples, test_orig_labels = pgd_attack(model, data_test.x_test, data_test.y_test, eps)\n","\n","print(\"Attack Data 생성 완료\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PpGgehhztEQE","executionInfo":{"status":"ok","timestamp":1664702817283,"user_tz":-540,"elapsed":2481027,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"d912c659-ae56-4cb4-b3f0-2aceda1799d1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["prog : 500\n","prog : 1000\n","prog : 1500\n","prog : 2000\n","prog : 2500\n","prog : 3000\n","prog : 3500\n","prog : 4000\n","prog : 4500\n","prog : 5000\n","prog : 5500\n","prog : 6000\n","prog : 6500\n","prog : 7000\n","prog : 7500\n","prog : 8000\n","prog : 8500\n","prog : 9000\n","prog : 9500\n","prog : 10000\n","prog : 10500\n","Epsilon: 0.1\tTest Accuracy = 2214 / 10800 = 0.205\n","prog : 500\n","prog : 1000\n","Epsilon: 0.1\tTest Accuracy = 244 / 1200 = 0.20333333333333334\n","prog : 500\n","prog : 1000\n","prog : 1500\n","prog : 2000\n","prog : 2500\n","prog : 3000\n","prog : 3500\n","prog : 4000\n","prog : 4500\n","prog : 5000\n","prog : 5500\n","Epsilon: 0.1\tTest Accuracy = 1198 / 6180 = 0.19385113268608414\n","Attack Data 생성 완료\n"]}]},{"cell_type":"markdown","source":["# 3. Fourier for Detection"],"metadata":{"id":"aNWhl-LvUr-b"}},{"cell_type":"markdown","source":["## 3.0.0. 푸리에 정의"],"metadata":{"id":"8slr2rv9MqSs"}},{"cell_type":"code","source":["def Fourier_transform(img):\n","  f = np.fft.fft2(img) # 이미지에 푸리에 변환 적용\n","  fshift = np.fft.fftshift(f) # 분석을 용이하게 하기 위해 주파수가 0인 부분을 중앙에 위치시킴. 중앙에 저주파가 모이게 됨.\n","  \n","  mag_spectrum = 20*np.log(np.abs(fshift)) # spectrum 구하는 수학식.\n","  if np.min(mag_spectrum) < 0:\n","    mag_spectrum -= np.min(mag_spectrum) # 0~???로 변환\n","\n","  if np.min(mag_spectrum) < 0: # 확인용; 프린트 X\n","    print(\"### 나오면 안됨 ### 0보다 작은 값 안 없어짐\", np.min(mag_spectrum))\n","\n","  maxval = np.max(mag_spectrum)\n","  if maxval <= 0:\n","    print(\"### maxval 0 이하인 경우 있음 ### \")\n","    maxval += 1e-6\n","\n","  mag_spectrum = mag_spectrum/maxval # 0~1 정규화\n","\n","  if np.max(mag_spectrum) < 0 or np.min(mag_spectrum) < 0:\n","    print(\"### 0보다 작은 값 남아있음 ###\")\n","  \n","  mag_spectrum = mag_spectrum * 255\n","  mag_spectrum = (mag_spectrum.astype(int))\n","  # print(\"min :\", np.min(mag_spectrum), \"max :\", np.max(mag_spectrum))\n","\n","  if np.max(mag_spectrum) > 255: # 확인용; 프린트 X\n","    print(\"### 나오면 안됨 ### 1보다 큰 값 있음\")\n","\n","  return mag_spectrum"],"metadata":{"id":"Gbd5XYYIcGPR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class FouBin_train:\n","  def __init__(self):\n","    # train - original : 1 (True)\n","    x_ori = data_train.x_train\n","    y_ori = np.ones(len(x_ori))\n","    # train - adversarial : 0 (False)\n","    x_adv = train_ad_examples\n","    y_adv = np.zeros(len(x_adv))\n","    # validation - original : 1 (True)\n","    x_ori_val = data_train.x_val\n","    y_ori_val = np.ones(len(x_ori_val))\n","    # validation - adversarial : 0 (False)\n","    x_adv_val = val_ad_examples\n","    y_adv_val = np.zeros(len(x_adv_val))\n","\n","    # train용 & validation용 concat =============================================\n","    temp_train_x = np.concatenate((x_ori, x_adv))\n","    temp_train_y = np.concatenate((y_ori, y_adv))\n","    temp_val_x = np.concatenate((x_ori_val, x_adv_val))\n","    temp_val_y = np.concatenate((y_ori_val, y_adv_val))\n","\n","    shuff_train = list(range(len(temp_train_x)))\n","    random.shuffle(shuff_train)\n","    shuff_val = list(range(len(temp_val_x)))\n","    random.shuffle(shuff_val)\n","\n","    # train ====================================================================\n","    x_train = []\n","    f_train = []\n","    bin_train = []\n","    train_prog = 0\n","    for train_idx in shuff_train:\n","      x_train.append(temp_train_x[train_idx])\n","      f_train.append(Fourier_transform(temp_train_x[train_idx]))\n","      bin_train.append(temp_train_y[train_idx])\n","      train_prog += 1\n","      if train_prog%500 == 0:\n","        print(\"train prog :\", train_prog)\n","    x_train = np.array(x_train)\n","    f_train = np.array(f_train)\n","    bin_train = np.array(bin_train)\n","    # bin_train = to_categorical(bin_train)\n","    \n","    # val ======================================================================   \n","    x_val = []\n","    f_val = []\n","    bin_val = []\n","    val_prog = 0\n","    for val_idx in shuff_val:\n","      x_val.append(temp_val_x[val_idx])\n","      f_val.append(Fourier_transform(temp_val_x[val_idx]))\n","      bin_val.append(temp_val_y[val_idx])\n","      val_prog += 1\n","      if val_prog%500 == 0:\n","        print(\"val prog :\", val_prog)\n","    x_val = np.array(x_val)\n","    f_val = np.array(f_val)\n","    bin_val = np.array(bin_val)\n","    # bin_val = to_categorical(bin_val)\n","\n","    self.x_train, self.f_train, self.bin_train = x_train, f_train, bin_train\n","    self.x_val, self.f_val, self.bin_val = x_val, f_val, bin_val\n","\n","class FouBin_test:\n","  def __init__(self):\n","    # test - original :1 (True)\n","    x_ori_test = data_test.x_test\n","    y_ori_test = np.ones(len(x_ori_test))\n","    # test - adversarial : 0 (False)\n","    x_adv_test = test_ad_examples\n","    y_adv_test = np.zeros(len(x_adv_test))\n","\n","    # test용 concat ============================================================\n","    temp_test_x = np.concatenate((x_ori_test, x_adv_test))\n","    temp_test_y = np.concatenate((y_ori_test, y_adv_test))\n","\n","    shuff_test = list(range(len(temp_test_x)))\n","    random.shuffle(shuff_test)\n","\n","    # test =====================================================================\n","    x_test = []\n","    f_test = []\n","    bin_test = []\n","    test_prog = 0\n","    for test_idx in shuff_test:\n","      x_test.append(temp_test_x[test_idx])\n","      f_test.append(Fourier_transform(temp_test_x[test_idx]))\n","      bin_test.append(temp_test_y[test_idx])\n","      test_prog += 1\n","      if test_prog%500 == 0:\n","        print(\"test prog :\", test_prog)\n","    x_test = np.array(x_test)\n","    f_test = np.array(f_test)\n","    bin_test = np.array(bin_test)\n","    # bin_test = to_categorical(bin_test)\n","\n","    self.x_test, self.f_test, self.bin_test = x_test, f_test, bin_test"],"metadata":{"id":"LU8yW6oYxgWn"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["fourier_train = FouBin_train()\n","fourier_test = FouBin_test()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2GTSaWQvxzBU","executionInfo":{"status":"ok","timestamp":1664702838080,"user_tz":-540,"elapsed":20802,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"f76939fd-0975-4a41-d8bb-c524f3341a2a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:5: RuntimeWarning: divide by zero encountered in log\n","  \"\"\"\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: RuntimeWarning: invalid value encountered in subtract\n","  import sys\n"]},{"output_type":"stream","name":"stdout","text":["train prog : 500\n","train prog : 1000\n","train prog : 1500\n","train prog : 2000\n","train prog : 2500\n","train prog : 3000\n","train prog : 3500\n","train prog : 4000\n","train prog : 4500\n","train prog : 5000\n","train prog : 5500\n","train prog : 6000\n","train prog : 6500\n","train prog : 7000\n","train prog : 7500\n","train prog : 8000\n","train prog : 8500\n","train prog : 9000\n","train prog : 9500\n","train prog : 10000\n","train prog : 10500\n","train prog : 11000\n","train prog : 11500\n","train prog : 12000\n","train prog : 12500\n","train prog : 13000\n","train prog : 13500\n","train prog : 14000\n","train prog : 14500\n","train prog : 15000\n","train prog : 15500\n","train prog : 16000\n","train prog : 16500\n","train prog : 17000\n","train prog : 17500\n","train prog : 18000\n","train prog : 18500\n","train prog : 19000\n","train prog : 19500\n","train prog : 20000\n","train prog : 20500\n","train prog : 21000\n","train prog : 21500\n","val prog : 500\n","val prog : 1000\n","val prog : 1500\n","val prog : 2000\n","test prog : 500\n","test prog : 1000\n","test prog : 1500\n","test prog : 2000\n","test prog : 2500\n","test prog : 3000\n","test prog : 3500\n","test prog : 4000\n","test prog : 4500\n","test prog : 5000\n","test prog : 5500\n","test prog : 6000\n","test prog : 6500\n","test prog : 7000\n","test prog : 7500\n","test prog : 8000\n","test prog : 8500\n","test prog : 9000\n","test prog : 9500\n","test prog : 10000\n","test prog : 10500\n","test prog : 11000\n","test prog : 11500\n","test prog : 12000\n"]}]},{"cell_type":"markdown","source":["## 3.0.1 푸리에 비교"],"metadata":{"id":"Fd4zgSrxMif1"}},{"cell_type":"markdown","source":["* 정상 & Adv 비교 : 같은 이미지에 대해"],"metadata":{"id":"PFhKxv0wHHhO"}},{"cell_type":"code","source":["norimg = data_train.x_train[:5]\n","advimg = train_ad_examples[:5]"],"metadata":{"id":"9p5QISmyMiPK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10,10))\n","for i in range(5):\n","  plt.subplot(1,5,i+1)\n","  plt.imshow(norimg[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"rleDYpKoObuA","executionInfo":{"status":"ok","timestamp":1664706293663,"user_tz":-540,"elapsed":1086,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"b8efd0cb-852b-4704-f95d-8ac6a4c0b467"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 5 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=(10,10))\n","for i in range(5):\n","  plt.subplot(1,5,i+1)\n","  plt.imshow(advimg[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"M3cLSWsBOcNg","executionInfo":{"status":"ok","timestamp":1664706294560,"user_tz":-540,"elapsed":901,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"02618296-3e7a-4a11-f01b-f89be0ffea2d"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 5 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["fnorimg = Fourier_transform(norimg)\n","fadvimg = Fourier_transform(advimg)"],"metadata":{"id":"cFbjybrNM9jF"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["plt.figure(figsize=(10,10))\n","for i in range(5):\n","  plt.subplot(1,5,i+1)\n","  plt.imshow(fnorimg[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"egtHp59oNMHs","executionInfo":{"status":"ok","timestamp":1664706296588,"user_tz":-540,"elapsed":1157,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"158a7a17-15a5-4753-f7d9-1d968ada0011"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 5 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["plt.figure(figsize=(10,10))\n","for i in range(5):\n","  plt.subplot(1,5,i+1)\n","  plt.imshow(fadvimg[i])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":147},"id":"--ACTMDqNqbq","executionInfo":{"status":"ok","timestamp":1664706297210,"user_tz":-540,"elapsed":626,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"2aa5f1d9-0b27-4a8e-f2f3-ef98d9c55de8"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 5 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["iii = fourier_train.f_train[0]\n","plt.imshow(iii)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":283},"id":"_EXY6UV41RwD","executionInfo":{"status":"ok","timestamp":1664702838762,"user_tz":-540,"elapsed":687,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"0ace373e-9908-49b8-f391-19575795792e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.image.AxesImage at 0x7f6b52f65990>"]},"metadata":{},"execution_count":20},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["## 3.1. Fourier Train"],"metadata":{"id":"Bd4dDiQnxC7B"}},{"cell_type":"code","source":["def model_detector(data, file_name, num_epochs=50, batch_size=128):\n","    # 참고 : https://velog.io/@eodud0582/cnn-ox-image-classification\n","    \n","    # 함성곱 신경망 모델 구성하기\n","    model = tf.keras.models.Sequential([\n","        tf.keras.layers.Conv2D(16, (3,3), activation='relu', input_shape=(32, 32, 3)),\n","        tf.keras.layers.MaxPooling2D(2,2),\n","        tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","        tf.keras.layers.MaxPooling2D(2,2),\n","        tf.keras.layers.Conv2D(32, (3,3), activation='relu'),\n","        tf.keras.layers.MaxPooling2D(2,2),\n","        tf.keras.layers.Flatten(),\n","        tf.keras.layers.Dense(512, activation='relu'),\n","        tf.keras.layers.Dense(1, activation='sigmoid')\n","        ])\n","    model.summary() # 신경망의 구조 확인\n","    \n","    # 모델 컴파일\n","    # compile() 메서드를 이용해서 손실 함수 (loss function)와 옵티마이저 (optimizer)를 지정\n","    model.compile(optimizer=RMSprop(learning_rate=0.001), # 옵티마이저로는 RMSprop 사용\n","                  loss='binary_crossentropy', # 손실 함수로 ‘binary_crossentropy’ 사용\n","                  metrics= ['accuracy'])\n","    # RMSprop (Root Mean Square Propagation) Algorithm: 훈련 과정 중에 학습률을 적절하게 변화시킨다.\n","    \n","    # # 모델 훈련\n","    model.fit(data.f_train, data.bin_train,\n","              validation_data = (data.f_val, data.bin_val), \n","              epochs=num_epochs, steps_per_epoch=60\n","               )\n","    \n","    if file_name != None:\n","      model.save(file_name)\n","\n","    return model"],"metadata":{"id":"Hsidp8uih2x7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#@title CNN detector load option\n","load_param_for_detector = True #@param {type:\"boolean\"}\n","save_new_file_for_detector = False #@param {type:\"boolean\"}\n","\n","\n","if load_param_for_detector == False:\n","  if save_new_file_for_detector == True:\n","    fname = \"Detector_param.h5\"\n","  elif save_new_file_for_detector == False:\n","    fname = None\n","  detector = model_detector(fourier_train, fname, num_epochs=15)\n","elif load_param == True:\n","  detector = load_model('Detector_param.h5')"],"metadata":{"id":"yAkYNXpjkSnp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["loss, accuracy = detector.evaluate(fourier_train.f_train, fourier_train.bin_train)\n","print('train set accuracy: ', accuracy * 100) # train 성능\n","\n","loss, accuracy = detector.evaluate(fourier_train.f_val, fourier_train.bin_val)\n","print('validation set accuracy: ', accuracy * 100) # val 성능"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mDFC0doPkCzE","executionInfo":{"status":"ok","timestamp":1664702850671,"user_tz":-540,"elapsed":11655,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"f3aaba89-654f-491b-f383-e91ee5f03f5b"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["675/675 [==============================] - 8s 12ms/step - loss: 0.1829 - accuracy: 0.9340\n","train set accuracy:  93.39784383773804\n","75/75 [==============================] - 1s 10ms/step - loss: 0.1811 - accuracy: 0.9346\n","validation set accuracy:  93.4583306312561\n"]}]},{"cell_type":"markdown","source":["## 3.2. Fourier Test"],"metadata":{"id":"zzLlXY-PxFvP"}},{"cell_type":"code","source":["loss, accuracy = detector.evaluate(fourier_test.f_test, fourier_test.bin_test)\n","print('test set accuracy: ', accuracy * 100) # test 성능"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"G-yKGQPYxG1I","executionInfo":{"status":"ok","timestamp":1664702854665,"user_tz":-540,"elapsed":4006,"user":{"displayName":"김채현","userId":"06024775478798789360"}},"outputId":"134a1e13-8299-45bf-ce45-0144ee215948"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["380/380 [==============================] - 4s 10ms/step - loss: 0.1851 - accuracy: 0.9388\n","test set accuracy:  93.87721419334412\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"_nPGNQsnC4_3"},"execution_count":null,"outputs":[]}]}