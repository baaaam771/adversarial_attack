# -*- coding: utf-8 -*-
"""contest_main

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JEsGD3SH5nqM8dFBNkaMdF673Ul0nzjm
"""

import numpy as np
import pandas as pd
import os
import gzip
import urllib.request
import natsort
import matplotlib.pyplot as plt
import random


from PIL import Image
from keras.models import load_model

import tensorflow as tf
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import RMSprop
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator

from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D,GlobalAveragePooling2D
from tensorflow.keras.optimizers import SGD
from keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.layers import Conv2D, MaxPool2D, Dense, Flatten, Dropout


from sklearn.model_selection import train_test_split


################
from functions import *
loss_object = tf.keras.losses.CategoricalCrossentropy()


## 기본 설정 #####################################################################
signnum = 4 # 인식할 표지판 수 (바퀴 당 2번)
present_attack = True # 정상 -> 공격 -> 정상 ... ~ 으로 진행
eps = 0.1

model = load_model('./parameters/cnn_train_model.h5') # CNN classifier
detector = load_model('./parameters/Detector_param.h5') # Fourier Detector


for nth in range(signnum):

  input_img = Image.open("00087.png") # "// 표지판 이미지 여기에 넣어줘야 함: 근데 이미지 매번 촬영하는거니까 변수로 해서서 로딩하는는 방식이이 될될 것것 같음 //"
  input_img = input_img.resize((32,32))
  input_img = np.array(input_img)
  
  # CNN 모델 및 분류
  class_prediction_onehot = model.predict(input_img.reshape(1,32,32,3)/255) # one-hot
  class_prediction = [int(np.argmax(class_prediction_onehot))] # label 형태 (근데 리스트 안에 있음)

  # 공격 이미지 생성 (FGSM, eps=0.10) (정상 -> 공격 -> 정상 ... 반복)
  if present_attack == False:
    present_attack = True # 다음 번은 공격 하도록
  elif present_attack == True:
    trash1, trash2, ad_examples, trash3 = fgsm_attack(model, input_img/255, class_prediction_onehot, eps) #x 공격데이터 : 0~1 정규화 완료, y 데이터 : 12개 라벨
    input_img = ad_examples # 공격 이미지로 덮어씌우기 
    present_attack = False # 다음 번은 공격 안 하도록

  print(model.predict(np.array(input_img).reshape(-1,32,32,3)))
  print(trash3)

  # Fourier Detector
  fourier_img = Fourier_transform(input_img)
  detector_prediction = detector.predict(fourier_img.reshape(-1,32,32,3))
  if detector_prediction > 0.5 : # 공격 아님
    print("공격 아님")
    # return input_img, class_prediction, fourier_img
  elif detector_prediction <= 0.5 : # 공격
    print("공격 이미지")
    # return input_img, class_prediction, fourier_img
    # 운전자자 확인인 및및 방어모델델 구현해야함